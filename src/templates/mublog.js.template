const tag_mapping = {
	${tag_mapping}
};

// Temporary solution, we will have to replace all these flags with proper modular templating in the future
const theme_can_toggle = (${theme_can_toggle} === "true");

function get_tag_parameter() {
	const urlParams = new URLSearchParams(window.location.search);
	const tag = urlParams.get('tag');

	if (tag) {
		for (const item of Object.keys(tag_mapping)) {
			const tags = tag_mapping[item];

			if (!tags.includes(tag)) {
				hide_article_listing(item);
			}
		}
	}
}

function hide_article_listing(filename) {
	elem = document.getElementById(filename);
	if (elem) {
		elem.style.display = 'none';
	}
}

function toggle_theme() {
    // Load theme stored in cookie
    const preferred_theme = localStorage.getItem('theme');
    if (preferred_theme != "dark" && preferred_theme != "light") {
        console.log("Invalid theme! Defaulting to light theme.");
        set_theme("light");
        localStorage.setItem('theme', "light");
        return;
    } else {
        if (preferred_theme === "dark") {
            set_theme("light");
            localStorage.setItem('theme', "light");
        } else {
            set_theme("dark");
            localStorage.setItem('theme', "dark");
        }
    }
}

function get_default_theme() {
    return ${blog_theme};
}

function set_theme(theme) {
    if (theme != "dark" && theme != "light") {
        console.log("Invalid theme!");
        return;
    }
    document.body.classList.remove("light");
    document.body.classList.remove("dark");
    document.body.classList.add(theme);
}

document.addEventListener('DOMContentLoaded', function () {
    // Steps for theming:
    // 1) Check if its toggleable
    // -> If false: load theme, end of routine.
    // -> If true: enable toggle btn, check cookie, load theme, set cookie to current theme.
    // 2) On toggle btn press: Switch theme, currently set in cookie

    if (!theme_can_toggle) {
        // Set fixed theme
        set_theme(${blog_theme});
    } else {
        // Check cookie
        const preferred_theme = localStorage.getItem('theme');
        if (preferred_theme) {
            // Set preferred theme, stored in cookie
            set_theme(preferred_theme);
            // Update cookie with preferred theme
            localStorage.setItem('theme', preferred_theme);
        } else {
            // Set theme specified in cfg
            set_theme(${blog_theme});
            // Update cookie with theme specified in cfg
            localStorage.setItem('theme', ${blog_theme});
        }
    }

	get_tag_parameter();
});

document.addEventListener('DOMContentLoaded', function () {
    // Theme Switcher Function
    const body = document.querySelector("body");

    // Temporary, will eventually be replaced with modular templating
    if (theme_can_toggle) {
        const themeToggleBtn = document.getElementById('themeToggleBtn');
        themeToggleBtn.addEventListener('click', toggle_theme);
    }
});